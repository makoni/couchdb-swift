@Tutorial(time: 15) {
    @Intro(title: "Using with Vapor in server-side app") {
		Use CouchDBClient for developing server-side apps built with Vapor.
        
		@Image(source: chapter1.png, alt: "Application icon")
    }
    
    @Section(title: "Use CouchDBClient in macOS app") {
        @ContentAndMedia {
			Vapor is built on top of  Apple's [SwiftNIO](https://github.com/apple/swift-nio). `CouchDBClient` is compatible with SwiftNIO and can be used for server-side development.
            
            @Image(source: chapter1.png, alt: "Application icon")
        }
        
        @Steps {
            @Step {
				Add `CouchDBClient` as a Swift Package dependency.
                
                @Image(source: VaporTutorial-1.png, alt: "Add CouchDBClient as a Swift Package dependency.")
            }
            
            @Step {
				Open `routes.swift` in your Vapor project.
                
                @Code(name: "main.swift", file: VaporTutorial-1.swift)
            }
			
			@Step {
				Import `CouchDBClient` and create a client instance.
				
				@Code(name: "main.swift", file: VaporTutorial-2.swift)
			}
			
			@Step {
				Define your data model for CouchDB documents. Nested `Row` and `RowsResponse` models will be used to parse CouchDB responses.
				
				@Code(name: "main.swift", file: VaporTutorial-3.swift)
			}
			
			@Step {
				Get your document from DB. That example is using `CouchDB View` to find the document by the url field. Its map function needs a `key` param which is `appUrl` in our case.
				
				@Code(name: "main.swift", file: VaporTutorial-4.swift)
			}
			
			@Step {
				Parse the response into our data model.
				
				@Code(name: "main.swift", file: VaporTutorial-5.swift)
			}
			
			@Step {
				Finally pass the data to Leaf for template rendering.
				
				@Code(name: "main.swift", file: VaporTutorial-6.swift)
			}
        }
    }
}
